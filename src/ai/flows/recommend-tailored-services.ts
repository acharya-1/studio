// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI-powered tool that analyzes user needs and recommends tailored security and housekeeping service packages.
 *
 * - recommendTailoredServices - A function that takes property size and security concerns to recommend services.
 * - RecommendTailoredServicesInput - The input type for the recommendTailoredServices function.
 * - RecommendTailoredServicesOutput - The return type for the recommendTailoredServices function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendTailoredServicesInputSchema = z.object({
  propertySize: z
    .string()
    .describe('The size of the property (e.g., small, medium, large).'),
  securityConcerns: z
    .string()
    .describe(
      'Specific security concerns of the user (e.g., vandalism, theft, personal safety).'
    ),
});
export type RecommendTailoredServicesInput = z.infer<
  typeof RecommendTailoredServicesInputSchema
>;

const RecommendTailoredServicesOutputSchema = z.object({
  recommendedServices: z
    .array(z.string())
    .describe('An array of recommended security and housekeeping services.'),
  reasoning: z
    .string()
    .describe(
      'Clear reasoning for why these services are the most effective for the user s situation.'
    ),
});
export type RecommendTailoredServicesOutput = z.infer<
  typeof RecommendTailoredServicesOutputSchema
>;

export async function recommendTailoredServices(
  input: RecommendTailoredServicesInput
): Promise<RecommendTailoredServicesOutput> {
  return recommendTailoredServicesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'recommendTailoredServicesPrompt',
  input: {schema: RecommendTailoredServicesInputSchema},
  output: {schema: RecommendTailoredServicesOutputSchema},
  prompt: `You are an AI assistant that recommends security and housekeeping services based on user needs.

  Analyze the user's property size and security concerns to recommend the most suitable services.
  Provide clear reasoning for each recommendation, explaining why it is effective for their situation.

  Property Size: {{{propertySize}}}
  Security Concerns: {{{securityConcerns}}}

  Respond with an array of recommended services and a detailed reasoning.
  `,
});

const recommendTailoredServicesFlow = ai.defineFlow(
  {
    name: 'recommendTailoredServicesFlow',
    inputSchema: RecommendTailoredServicesInputSchema,
    outputSchema: RecommendTailoredServicesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
